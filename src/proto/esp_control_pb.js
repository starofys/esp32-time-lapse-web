// source: src/proto/esp_control.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

import jspb from 'google-protobuf';
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

goog.exportSymbol('proto.esp.CameraOption', null, global);
goog.exportSymbol('proto.esp.FrameSize', null, global);
goog.exportSymbol('proto.esp.PixFormat', null, global);
goog.exportSymbol('proto.esp.UdpServerOption', null, global);
goog.exportSymbol('proto.esp.WBMode', null, global);
goog.exportSymbol('proto.esp.WifiOption', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esp.CameraOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esp.CameraOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.esp.CameraOption.displayName = 'proto.esp.CameraOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esp.UdpServerOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esp.UdpServerOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.esp.UdpServerOption.displayName = 'proto.esp.UdpServerOption';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.esp.WifiOption = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.esp.WifiOption, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.esp.WifiOption.displayName = 'proto.esp.WifiOption';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esp.CameraOption.prototype.toObject = function(opt_includeInstance) {
  return proto.esp.CameraOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esp.CameraOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esp.CameraOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameSize: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pixFormat: jspb.Message.getFieldWithDefault(msg, 2, 0),
    wbModel: jspb.Message.getFieldWithDefault(msg, 3, 0),
    jpegQuality: jspb.Message.getFieldWithDefault(msg, 4, 0),
    freqMhz: jspb.Message.getFieldWithDefault(msg, 5, 0),
    flag: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sleep: jspb.Message.getFieldWithDefault(msg, 7, 0),
    brightness: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esp.CameraOption}
 */
proto.esp.CameraOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esp.CameraOption;
  return proto.esp.CameraOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esp.CameraOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esp.CameraOption}
 */
proto.esp.CameraOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.esp.FrameSize} */ (reader.readEnum());
      msg.setFrameSize(value);
      break;
    case 2:
      var value = /** @type {!proto.esp.PixFormat} */ (reader.readEnum());
      msg.setPixFormat(value);
      break;
    case 3:
      var value = /** @type {!proto.esp.WBMode} */ (reader.readEnum());
      msg.setWbModel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setJpegQuality(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFreqMhz(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFlag(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSleep(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBrightness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esp.CameraOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esp.CameraOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esp.CameraOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esp.CameraOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrameSize();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getPixFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getWbModel();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getJpegQuality();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFreqMhz();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFlag();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSleep();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getBrightness();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
};


/**
 * optional FrameSize frame_size = 1;
 * @return {!proto.esp.FrameSize}
 */
proto.esp.CameraOption.prototype.getFrameSize = function() {
  return /** @type {!proto.esp.FrameSize} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.esp.FrameSize} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setFrameSize = function(value) {
  return jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional PixFormat pix_format = 2;
 * @return {!proto.esp.PixFormat}
 */
proto.esp.CameraOption.prototype.getPixFormat = function() {
  return /** @type {!proto.esp.PixFormat} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.esp.PixFormat} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setPixFormat = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional WBMode wb_model = 3;
 * @return {!proto.esp.WBMode}
 */
proto.esp.CameraOption.prototype.getWbModel = function() {
  return /** @type {!proto.esp.WBMode} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {!proto.esp.WBMode} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setWbModel = function(value) {
  return jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional int32 jpeg_quality = 4;
 * @return {number}
 */
proto.esp.CameraOption.prototype.getJpegQuality = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setJpegQuality = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 freq_mhz = 5;
 * @return {number}
 */
proto.esp.CameraOption.prototype.getFreqMhz = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setFreqMhz = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 flag = 6;
 * @return {number}
 */
proto.esp.CameraOption.prototype.getFlag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setFlag = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 sleep = 7;
 * @return {number}
 */
proto.esp.CameraOption.prototype.getSleep = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setSleep = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 brightness = 8;
 * @return {number}
 */
proto.esp.CameraOption.prototype.getBrightness = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.esp.CameraOption} returns this
 */
proto.esp.CameraOption.prototype.setBrightness = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esp.UdpServerOption.prototype.toObject = function(opt_includeInstance) {
  return proto.esp.UdpServerOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esp.UdpServerOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esp.UdpServerOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    ip: jspb.Message.getFieldWithDefault(msg, 2, ""),
    port: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esp.UdpServerOption}
 */
proto.esp.UdpServerOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esp.UdpServerOption;
  return proto.esp.UdpServerOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esp.UdpServerOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esp.UdpServerOption}
 */
proto.esp.UdpServerOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setIp(value);
      break;
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esp.UdpServerOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esp.UdpServerOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esp.UdpServerOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esp.UdpServerOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIp();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional string ip = 2;
 * @return {string}
 */
proto.esp.UdpServerOption.prototype.getIp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.esp.UdpServerOption} returns this
 */
proto.esp.UdpServerOption.prototype.setIp = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 port = 1;
 * @return {number}
 */
proto.esp.UdpServerOption.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.esp.UdpServerOption} returns this
 */
proto.esp.UdpServerOption.prototype.setPort = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.esp.WifiOption.prototype.toObject = function(opt_includeInstance) {
  return proto.esp.WifiOption.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.esp.WifiOption} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esp.WifiOption.toObject = function(includeInstance, msg) {
  var f, obj = {
    ssid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    password: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.esp.WifiOption}
 */
proto.esp.WifiOption.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.esp.WifiOption;
  return proto.esp.WifiOption.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.esp.WifiOption} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.esp.WifiOption}
 */
proto.esp.WifiOption.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSsid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPassword(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.esp.WifiOption.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.esp.WifiOption.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.esp.WifiOption} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.esp.WifiOption.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSsid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPassword();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string ssid = 1;
 * @return {string}
 */
proto.esp.WifiOption.prototype.getSsid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.esp.WifiOption} returns this
 */
proto.esp.WifiOption.prototype.setSsid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string password = 2;
 * @return {string}
 */
proto.esp.WifiOption.prototype.getPassword = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.esp.WifiOption} returns this
 */
proto.esp.WifiOption.prototype.setPassword = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * @enum {number}
 */
proto.esp.FrameSize = {
  F_96X96: 0,
  QQVGA_160X120: 1,
  QCIF_176X144: 2,
  HQVGA_240X176: 3,
  F_240X240: 4,
  QVGA_320X240: 5,
  CIF_400X296: 6,
  HVGA_480X320: 7,
  VGA_640X480: 8,
  SVGA_800X600: 9,
  XGA_1024X768: 10,
  HD_1280X720: 11,
  SXGA_1280X1024: 12,
  UXGA_1600X1200: 13,
  FHD_1920X1080: 14,
  P_HD_720X1280: 15,
  P_3MP_864X1536: 16,
  QXGA_2048X1536: 17,
  QHD_2560X1440: 18,
  WQXGA_2560X1600: 19,
  P_FHD_1080X1920: 20,
  QSXGA_2560X1920: 21,
  INVALID: 22
};

/**
 * @enum {number}
 */
proto.esp.PixFormat = {
  RGB565: 0,
  YUV422: 1,
  YUV420: 2,
  GRAYSCALE: 3,
  JPEG: 4,
  RGB888: 5,
  RAW: 6,
  RGB444: 7,
  RGB555: 8
};

/**
 * @enum {number}
 */
proto.esp.WBMode = {
  AUTO: 0,
  SUNNY: 1,
  CLOUDY: 2,
  OFFICE: 3,
  HOME: 4
};
const exports = {}
goog.object.extend(exports, proto.esp);
export default exports;
